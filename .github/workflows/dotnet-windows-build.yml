name: _dotnet-windows-build

on:
  workflow_call:
    inputs:
      # *** ENV / TOOLING ***
      project-or-solution:
        description: Path to .sln/.csproj
        type: string
        required: true
      dotnet-version:
        description: .NET SDK (e.g., 7.0.x or 8.0.x)
        type: string
        default: '8.0.x'
      # Only when a repo has net461 targets or props that need it
      install-framework-461:
        description: Install .NET Framework 4.6.1 targeting pack
        type: boolean
        default: false
      configuration:
        description: Build configuration
        type: string
        default: 'Release'
      runtime:
        description: Restore/Publish RID (e.g., win-x86, win-x64)
        type: string
        default: 'win-x86'
      use-nuget-restore:
        description: Run nuget restore for packages.config projects
        type: boolean
        default: false
      # Switch to full MSBuild (good for mixed/legacy solutions)
      build-with-msbuild:
        description: Use Visual Studio MSBuild instead of dotnet build
        type: boolean
        default: false    

      # === VERSIONING ===
      versioning-mode:
        description: auto_tags | minver | none
        type: string
        default: 'auto_tags'

      # MinVer (only if versioning-mode=minver)
      minver-tag-prefix:
        type: string
        default: 'v'
      minver-auto-increment:
        type: string
        default: 'patch'

      # Auto-tags (only if versioning-mode=auto_tags)
      develop-prefix:
        description: Prefix for develop tags
        type: string
        default: 'develop-v'
      release-prefix-template:
        description: Prefix for release/* tags. Use {base} for branch base (e.g., 3.0.0)
        type: string
        default: 'release-{base}-v'
      default-develop-version:
        description: First develop version if no tags exist
        type: string
        default: '1.0.0.0'
      default-release-revision:
        description: Suffix for first release tag (e.g., '.0' -> 3.0.0.0)
        type: string
        default: '.0'
      project-tag-suffix:
        description: Optional per-project suffix added to tag prefix (e.g., '-WS' -> develop-v...-WS)
        type: string
        default: ''        
        
      # *** TEST ***
      test-project-or-solution:
        description: Optional test project/solution path filter
        type: string
        default: ''
      run-tests:
        type: boolean
        default: false
        
      # *** PUBLISH APP (dotnet publish) ***
      publish:
        type: boolean
        default: false
      publish-profile:
        description: PublishProfile name (FolderProfile, etc.)
        type: string
        default: 'FolderProfile'
      publish-output-dir:
        description: Explicit publish output folder (optional)
        type: string
        default: ''

      # === MSI (WiX) ===
      wix-project:
        description: Path to .wixproj
        type: string
        default: ''
      wix-platform:
        description: x86 | x64
        type: string
        default: 'x86'
      wix-version:
        description: WiX Toolset 3.x version to install (e.g., 3.11.2)
        type: string
        default: '3.11.2'

      upload:
        description: Upload final artifact produced under 'out'
        type: boolean
        default: false
        
    outputs:
      version:
        description: Resolved version (may be empty if versioning-mode=none on non-matching branches)
        value: ${{ jobs.build.outputs.version }}
      artifact_name:
        description: Name of published app artifact (if produced)
        value: ${{ jobs.build.outputs.artifact_name }}

    secrets:
      GH_PACKAGES_TOKEN:
        description: Optional PAT for cross-repo GitHub Packages restore (fallback to GITHUB_TOKEN)
        required: false

jobs:
  build:
    permissions:
      contents: write   # needed for pushing tags (auto_tags)
      packages: read
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      artifact_name: ${{ steps.artifact-meta.outputs.name }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # *** ENV / TOOLING ***

      - name: Setup MSBuild (Visual Studio)
        uses: microsoft/setup-msbuild@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs['dotnet-version'] }}

      - name: Ensure WiX Toolset version
        if: ${{ inputs['wix-project'] != '' && inputs['wix-version'] != '' }}
        shell: pwsh
        run: |
          $desired = "${{ inputs['wix-version'] }}"
          $pkg = choco list --local-only wixtoolset --limit-output | ForEach-Object {
            ($_ -split '\|')[1]
          }
          if ($pkg -eq $desired) {
            Write-Host "WiX $desired already installed, skipping."
            exit 0
          }
          if ($pkg) {
            Write-Host "Different WiX version ($pkg) detected. Uninstalling..."
            choco uninstall wixtoolset -y --no-progress
          }
          Write-Host "Installing WiX $desired..."
          choco install wixtoolset --version $desired -y --no-progress
        
      # Install .NET Framework 4.6.1 targeting pack if requested
      - name: Install .NET Framework 4.6.1 targeting pack
        if: ${{ inputs.install-framework-461 }}
        shell: powershell
        run: choco install netfx-4.6.1-devpack -y

      # Optional: NuGet restore for packages.config
      - name: NuGet restore (packages.config)
        if: ${{ inputs['use-nuget-restore'] }}
        run: nuget restore "${{ inputs['project-or-solution'] }}" -NonInteractive

      # SDK restore with RID
      - name: Restore
        run: dotnet restore "${{ inputs['project-or-solution'] }}" -r "${{ inputs.runtime }}" /p:WixTargetsImported=true
        
      # ================= Versioning =================
      - name: Compute Version (MinVer)
        id: minver
        if: ${{ inputs['versioning-mode'] == 'minver' }}
        shell: pwsh
        run: |
          $msbuild = (Get-Command MSBuild.exe -ErrorAction Stop).Path
          $props = @(
            '/p:ContinuousIntegrationBuild=true',
            "/p:MinVerTagPrefix=${{ inputs['minver-tag-prefix'] }}",
            "/p:MinVerAutoIncrement=${{ inputs['minver-auto-increment'] }}"
          )
          $version = & $msbuild '${{ inputs['project-or-solution'] }}' /nologo $props -getProperty:MinVerVersion | Select-Object -Last 1
          if (-not $version) { throw "MinVerVersion not computed." }
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Compute & Push Tag (Auto Tags)
        id: autotags
        if: ${{ inputs['versioning-mode'] == 'auto_tags' }}
        shell: pwsh
        env:
          DEVELOP_PREFIX: ${{ inputs['develop-prefix'] }}
          RELEASE_PREFIX_TEMPLATE: ${{ inputs['release-prefix-template'] }}
          DEFAULT_DEV_VERSION: ${{ inputs['default-develop-version'] }}
          DEFAULT_RELEASE_REV: ${{ inputs['default-release-revision'] }}
          SUFFIX: ${{ inputs['project-tag-suffix'] }}
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git fetch --tags

          $branch = "${{ github.ref_name }}"
          if ($branch -eq "develop") {
            $tagPrefix = "$env:DEVELOP_PREFIX$env:SUFFIX"
            $defaultVersion = $env:DEFAULT_DEV_VERSION
          }
          elseif ($branch -like "release/*") {
            $base = $branch -replace '^release/', ''
            $tagPrefix = ($env:RELEASE_PREFIX_TEMPLATE -replace '\{base\}', $base) + $env:SUFFIX
            $defaultVersion = "$base$env:DEFAULT_RELEASE_REV"
          }
          else {
            Write-Host "Non-develop, non-release branch. Skipping versioning."
            "version=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          $latestTag = git tag --list "$tagPrefix*" --sort=-v:refname | Select-Object -First 1
          if ($latestTag) {
            $numeric = $latestTag.Substring($tagPrefix.Length)
            $ver = [version]$numeric
            $next = "{0}.{1}.{2}.{3}" -f $ver.Major, $ver.Minor, $ver.Build, ($ver.Revision + 1)
          } else {
            $next = $defaultVersion
          }

          $newTag = "$tagPrefix$next"
          Write-Host "Tagging: $newTag"
          git tag $newTag
          git push origin $newTag

          "version=$next" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Select Version Output
        id: set-version
        shell: pwsh
        run: |
          $minver = '${{ steps.minver.outputs.version }}'
          $auto   = '${{ steps.autotags.outputs.version }}'
          $v = if ($minver) { $minver } elseif ($auto) { $auto } else { '' }
          "version=$v" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Resolved version: $v"

      # ================= Build & Test =================
      - name: Build (MSBuild)
        if: ${{ inputs['build-with-msbuild'] || inputs['wix-project'] != '' }}
        shell: cmd
        run: |
          MSBuild.exe ^
            "${{ inputs['project-or-solution'] }}" /m ^
            /p:Configuration=${{ inputs.configuration }} ^
            /p:Platform=${{ inputs['wix-platform'] }} /v:m

      - name: Build
        if: ${{ !inputs['build-with-msbuild'] || inputs['wix-project'] != '' }}
        run: dotnet build "${{ inputs['project-or-solution'] }}" -c "${{ inputs.configuration }}" --no-restore

      - name: Test
        if: ${{ inputs['run-tests'] }}
        run: |
          if ("${{ inputs['test-project-or-solution'] }}") {
            dotnet test "${{ inputs['test-project-or-solution'] }}" -c "${{ inputs.configuration }}" --no-build --collect:"XPlat Code Coverage" /p:WixTargetsImported=true
          } else {
            dotnet test "${{ inputs['project-or-solution'] }}" -c "${{ inputs.configuration }}" --no-build --collect:"XPlat Code Coverage" /p:WixTargetsImported=true
          }

      # ================= Publish (optional) =================
      - name: Publish
        if: ${{ inputs.publish }}
        shell: pwsh
        run: |
          $version = '${{ steps.set-version.outputs.version }}'
          $out = '${{ inputs['publish-output-dir'] }}'
          $args = @(
            'publish', '${{ inputs['project-or-solution'] }}',
            '-c', '${{ inputs.configuration }}',
            '-r', '${{ inputs.runtime }}',
            '/p:PublishProfile=${{ inputs['publish-profile'] }}',
            '--no-build'
          )
          if ($version) { $args += "/p:Version=$version" }
          if ($out) { $args += @('-o', $out) }
          dotnet @args /p:WixTargetsImported=true

      # ================= WiX (optional) =================
      - name: Resolve WiX paths
        id: wixpaths
        if: ${{ inputs['wix-project'] != '' }}
        shell: pwsh
        run: |
          $ver = "${{ inputs['wix-version'] }}"
      
          # Fixed: no string interpolation; use Join-Path with $env:ProgramFiles(x86)
          $wixTargets = Join-Path (Join-Path $env:ProgramFiles(x86) 'MSBuild\Microsoft\WiX\v3.x') 'Wix.targets'
          if (!(Test-Path $wixTargets)) { throw "WiX MSBuild targets not found at $wixTargets" }
      
          $pickByShort = $null
          if ($ver -and $ver.Trim()) {
            try {
              $v = [version]$ver
              $pickByShort = "$($v.Major).$($v.Minor)"   # e.g., 3.11 or 3.14
            } catch { }
          }
      
          $all = Get-ChildItem $env:ProgramFiles(x86) -Directory |
                 Where-Object { $_.Name -like 'WiX Toolset v3.*' } |
                 Sort-Object Name -Descending
      
          $candidate = if ($pickByShort) {
            $all | Where-Object { $_.Name -eq "WiX Toolset v$pickByShort" } | Select-Object -First 1
          } else { $null }
      
          if (-not $candidate) { $candidate = $all | Select-Object -First 1 }
          if (-not $candidate) { throw "No WiX Toolset v3.x installation found under $($env:ProgramFiles(x86))" }
      
          $wixBin = Join-Path $candidate.FullName 'bin'
          if (!(Test-Path $wixBin)) { throw "WiX bin not found at $wixBin" }
      
          "WIX_TARGETS=$wixTargets" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "WIX_BIN=$wixBin"         | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build MSI (WiX)
        if: ${{ inputs['wix-project'] != '' }}
        shell: cmd
        run: |
          MSBuild.exe ^
            "${{ inputs['wix-project'] }}" ^
            /p:Configuration=${{ inputs.configuration }} ^
            /p:Platform=${{ inputs['wix-platform'] }} ^
            /p:ProductVersion=${{ steps.set-version.outputs.version }} ^
            /p:BuildProjectReferences=false ^
            /p:WixTargetsPath="${{ steps.wixpaths.outputs.WIX_TARGETS }}" ^
            /p:WixToolPath="${{ steps.wixpaths.outputs.WIX_BIN }}\" ^
            /p:WixTasksPath="${{ steps.wixpaths.outputs.WIX_BIN }}\WixTasks.dll" ^
            /t:Rebuild /v:m


      # ================= Artifacts =================
      - name: Artifact metadata
        id: artifact-meta
        shell: pwsh
        run: |
          $v = '${{ steps.set-version.outputs.version }}'
          $name = if ($v) { "build-$v" } else { "build" }
          "name=$name" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Publish Output (if any)
        if: ${{ inputs.publish }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-meta.outputs.name }}-publish
          if-no-files-found: ignore
          path: |
            **/publish/**
            **/bin/**/publish/**

      - name: Upload MSI (if any)
        if: ${{ inputs['wix-project'] != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-meta.outputs.name }}-msi
          if-no-files-found: ignore
          path: |
            **/*.msi
            Installers/**/bin/**/**/*.msi
