name: _dotnet-windows-build

on:
  workflow_call:
    inputs:
      # *** ENVIRONMENT ***
      project-or-solution:
        description: Path to .sln/.csproj
        type: string
        required: true
      dotnet-version:
        description: .NET SDK (e.g., 8.0.x)
        type: string
        default: '8.0.x'
      # Only when a repo has net461 targets or props that need it
      install-framework-461:
        description: Install .NET Framework 4.6.1 targeting pack
        type: boolean
        default: false
        
      # *** BUILD ***
      configuration:
        type: string
        default: 'Release'
      runtime:
        description: Publish RID
        type: string
        default: 'win-x86'
      self-contained:
        type: boolean
        default: false
      publish:
        type: boolean
        default: false
      setup-nuget:
        type: boolean
        default: false
      use-nuget-restore:
        description: Run nuget restore for packages.config projects
        type: boolean
        default: false
      # Switch to full MSBuild (good for mixed/legacy solutions)
      build-with-msbuild:
        description: Use Visual Studio MSBuild instead of dotnet build
        type: boolean
        default: false    
        
      # *** TEST ***
      test-project-or-solution:
        description: Optional test project/solution
        type: string
        default: ''

      # *** PUBLISH NUGET PACKAGE ***
      pack:
        type: boolean
        default: false
      nuspec-path:
        description: Path to .nuspec (relative to repo root)
        type: string
        default: ''
      sign-nuget:
        description: Sign produced .nupkg via NuGet sign (requires PFX secrets)
        type: boolean
        default: false

      # *** PUBLISH INSTALLER PACKAGE ***
      upload:
        type: boolean
        default: false
        
    outputs:
      artifact_name:
        description: Name of published app artifact (if produced)
        value: ${{ jobs.build.outputs.artifact_name }}

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    outputs:
      artifact_name: ${{ steps.meta.outputs.artifact_name }}

    steps:
      - uses: actions/checkout@v4
      
      # *** ENVIRONMENT ***

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs['dotnet-version'] }}

      # Install .NET Framework 4.6.1 targeting pack if requested
      - name: Install .NET Framework 4.6.1 targeting pack
        if: ${{ inputs.install-framework-461 }}
        shell: powershell
        run: choco install netfx-4.6.1-devpack -y

      # Make sure NuGet CLI is available for packages.config restore
      - name: Setup NuGet
        if: ${{ inputs.setup-nuget }}
        uses: NuGet/setup-nuget@v2

      # packages.config restore (puts NUnit.props etc. in ./packages)
      - name: NuGet restore (packages.config)
        if: ${{ inputs.use-nuget-restore }}
        run: nuget restore "${{ inputs['project-or-solution'] }}" -NonInteractive

      # SDK-style restore (global cache)
      - name: Restore
        run: dotnet restore "${{ inputs['project-or-solution'] }}"

      # *** BUILD ***

      # Choose build engine
      - name: Build (MSBuild)
        if: ${{ inputs.build-with-msbuild }}
        shell: cmd
        run: |
          "%ProgramFiles(x86)%\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" ^
            "${{ inputs['project-or-solution'] }}" /m /p:Configuration=${{ inputs.configuration }} /v:m
      - name: Build
        if: ${{ !inputs.build-with-msbuild }}
        run: dotnet build "${{ inputs['project-or-solution'] }}" -c "${{ inputs.configuration }}" --no-restore

      - name: Publish
        if: ${{ inputs.publish }}
        run: >
          dotnet publish "${{ inputs['project-or-solution'] }}"
          -c "${{ inputs.configuration }}"
          -r "${{ inputs.runtime }}"
          --self-contained ${{ inputs['self-contained'] }}
          --no-build
          -o out

      - id: meta
        if: ${{ inputs.publish }}
        run: echo "artifact_name=app-${{ inputs['dotnet-version'] }}" >> $env:GITHUB_OUTPUT

      # *** TEST ***

      - name: Test
        if: ${{ inputs['test-project-or-solution'] != '' }}
        run: dotnet test "${{ inputs['test-project-or-solution'] }}" -c "${{ inputs.configuration }}" --no-build --verbosity normal

      # *** PUBLISH NUGET PACKAGE ***

      - name: NuGet pack (.nuspec)
        if: ${{ inputs.pack && inputs['nuspec-path'] != '' }}
        shell: pwsh
        run: |
          $args = @(
          "pack", "${{ inputs['nuspec-path'] }}",
          "-OutputDirectory", "nupkg",
          "-Properties", "Configuration=${{ inputs.configuration }}",
          "-Symbols", "-SymbolPackageFormat", "snupkg"
          )
          if ("${{ inputs['package-version'] }}") {
          $args += @("-Version", "${{ inputs['package-version'] }}")
          }
          nuget @args

      # Validate signing secrets
      - name: Validate signing secrets
        if: ${{ inputs.sign-nuget }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if ([string]::IsNullOrWhiteSpace("${{ secrets.CODESIGN_PFX_B64 }}") -or
              [string]::IsNullOrWhiteSpace("${{ secrets.CODESIGN_PFX_PASSWORD }}")) {
            throw "sign-nuget=true but CODESIGN_PFX_B64 / CODESIGN_PFX_PASSWORD not provided to the reusable workflow."
          }
      
      # Write PFX from secret
      - name: Write PFX from secret
        if: ${{ inputs.sign-nuget }}
        shell: pwsh
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.CODESIGN_PFX_B64 }}")
          [IO.File]::WriteAllBytes("codesign.pfx", $bytes)
          $len = (Get-Item "codesign.pfx").Length
          if ($len -lt 1024) { throw "codesign.pfx looks too small ($len bytes). Check CODESIGN_PFX_B64." }
          "CODESIGN_PWD=${{ secrets.CODESIGN_PFX_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      # NuGet sign packages
      - name: NuGet sign packages
        if: ${{ inputs.sign-nuget && hashFiles('nupkg/**/*.nupkg') != '' }}
        shell: pwsh
        run: |
          nuget sign "nupkg\*.nupkg" `
            -CertificatePath codesign.pfx `
            -CertificatePassword $env:CODESIGN_PWD `
            -Timestamper https://timestamp.digicert.com `
            -NonInteractive `
            -Overwrite

      - name: Upload NuGet packages
        if: ${{ inputs.pack && hashFiles('nupkg/**/*.nupkg') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: nupkg

      # *** PUBLISH INSTALLER PACKAGE ***

      - name: Upload artifact
        if: ${{ inputs.upload }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: out
